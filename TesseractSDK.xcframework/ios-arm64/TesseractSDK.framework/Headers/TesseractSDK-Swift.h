// Generated by Apple Swift version 5.6.1 (swiftlang-5.6.0.323.66 clang-1316.0.20.12)
#ifndef TESSERACTSDK_SWIFT_H
#define TESSERACTSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TesseractSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

typedef SWIFT_ENUM_NAMED(NSInteger, KeyUsage, "KeyUsage", open) {
  KeyUsageOTP = 0,
  KeyUsageCR = 1,
  KeyUsageENCRYPT = 2,
  KeyUsageINTEGRITY = 3,
  KeyUsageVERIFY = 4,
  KeyUsageUNLOCK = 5,
  KeyUsageDECRYPT = 6,
  KeyUsageKEYWRAP = 7,
  KeyUsageUNWRAP = 8,
  KeyUsageDERIVE = 9,
  KeyUsageGENERATE = 10,
  KeyUsageUNKNOWN = 11,
};


typedef SWIFT_ENUM_NAMED(NSInteger, Result, "Result", open) {
  ResultSDK_NOT_INIT = 0,
  ResultSUCCESS = 1,
  ResultTOKEN_ALREADY_EXISTS = 2,
  ResultERROR_SAVING_TOKEN = 3,
  ResultTOKEN_NOT_FOUND = 4,
  ResultINVALID_TOKEN_STATUS = 5,
  ResultTOKEN_NOT_SELECTED = 6,
  ResultINVALID_ENROLLMENT_STRING = 7,
  ResultINVALID_ACT_CODE = 8,
  ResultUNKNOWN_ERROR = 9,
  ResultNOT_AUTH = 10,
  ResultBAD_PIN = 11,
  ResultACTIVATION_ERROR = 12,
  ResultINVALID_PARAMETER = 13,
  ResultNO_INTERNET_ACCESS = 14,
  ResultINVALID_TOKEN_IS_UNASSIGNED = 15,
  ResultINVALID_TOKEN_IS_WAITING = 16,
  ResultINVALID_TOKEN_IS_ASSIGNED = 17,
  ResultINVALID_TOKEN_ALREADY_ACTIVATED = 18,
  ResultINVALID_TOKEN_IS_REVOKED = 19,
  ResultINVALID_TOKEN_IS_BLOCKED = 20,
  ResultTOKEN_INFORMATION_CORRUPT = 21,
  ResultNO_MATCH_BODY_TOKEN_SERIAL = 22,
  ResultACTIVATION_PROCESS = 23,
  ResultSYNC_SUCCESS = 24,
  ResultSYNC_FAILED = 25,
  ResultUNNECESSARY_SYNC = 26,
  ResultERROR_DATE = 27,
};

@class NSString;
enum TokenStatus : NSInteger;
@class NSDate;

SWIFT_CLASS_NAMED("TesseractSDK")
@interface TesseractSDK : NSObject
+ (enum Result)createTokenWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)deleteTokenWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)existsTokenWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)selectTokenWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)listTokens SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)enrollmentTokenWithEnrollmentStringBase64:(NSString * _Nonnull)enrollmentStringBase64 actCode:(NSString * _Nonnull)actCode SWIFT_WARN_UNUSED_RESULT;
+ (void)activateWithSuccess:(void (^ _Nonnull)(void))success failed:(void (^ _Nonnull)(enum Result))failure;
+ (enum Result)setPinWithPin:(NSString * _Nonnull)pin SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)authWithPin:(NSString * _Nonnull)pin SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isAuth SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)changePinWithOldPin:(NSString * _Nonnull)oldPin newPin:(NSString * _Nonnull)newPin SWIFT_WARN_UNUSED_RESULT;
+ (enum Result)synchronize SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)generateOTPWithChallenge:(NSString * _Nullable)challenge SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getTokenName SWIFT_WARN_UNUSED_RESULT;
+ (enum TokenStatus)getStatus SWIFT_WARN_UNUSED_RESULT;
+ (enum KeyUsage)getType SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)getSerial SWIFT_WARN_UNUSED_RESULT;
+ (NSDate * _Nullable)getExpiresAt SWIFT_WARN_UNUSED_RESULT;
+ (int64_t)getTimeInterval SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getAttempts SWIFT_WARN_UNUSED_RESULT;
+ (NSInteger)getMaxAttempts SWIFT_WARN_UNUSED_RESULT;
+ (int64_t)getTimeout SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TokenStatus, "TokenStatus", open) {
  TokenStatusUNKNOWN = 0,
  TokenStatusCREATED = 1,
  TokenStatusENROLLMENT = 2,
  TokenStatusWAITING_PIN = 3,
  TokenStatusREADY = 4,
  TokenStatusBLOCKED = 5,
};


#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
